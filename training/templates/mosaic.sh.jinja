
{% extends "sbatch_base.sh.jinja" %}

{% block setup %}
# LUMI setup
# module load LUMI/22.08 partition/G singularity-bindings/system-cpeGNU-22.08-noglibc  # singularity-bindings is BROKEN
module load LUMI/22.08 partition/G

# These replace the module load of singularity-bindings
local_libfabric_version=1.15.2.0
local_craympich_version=8.1.27
export SINGULARITYENV_LD_LIBRARY_PATH="/lib64:/opt/cray/pe/mpich/$local_craympich_version/ofi/gnu/9.1/lib-abi-mpich:/opt/cray/pe/lib64:/opt/cray/pe:/opt/cray/libfabric/$local_libfabric_version/lib64:/usr/lib64:/opt/cray/pe/gcc-libs:${SINGULARITYENV_LD_LIBRARY_PATH}"
export SINGULARITY_BIND="/opt/cray,/usr/lib64/libbrotlidec.so.1,/usr/lib64/libbrotlicommon.so.1,/usr/lib64/libnl-3.so.200,/usr/lib64/libnl-route-3.so.200,/usr/lib64/libcxi.so.1,/usr/lib64/libcurl.so.4,/usr/lib64/libnghttp2.so.14,/usr/lib64/libidn2.so.0,/usr/lib64/libssh.so.4,/usr/lib64/libpsl.so.5,/usr/lib64/libssl.so.1.1,/usr/lib64/libcrypto.so.1.1,/usr/lib64/libgssapi_krb5.so.2,/usr/lib64/libldap_r-2.4.so.2,/usr/lib64/liblber-2.4.so.2,/usr/lib64/libjson-c.so.3,/usr/lib64/libunistring.so.2,/usr/lib64/libkrb5.so.3,/usr/lib64/libk5crypto.so.3,/usr/lib64/libkrb5support.so.0,/usr/lib64/libsasl2.so.3,/usr/lib64/libkeyutils.so.1,/var/spool/slurmd/mpi_cray_shasta,/usr/lib64/libzstd.so.1,/lib64/libselinux.so.1,/usr/lib64/libpcre.so.1,${SINGULARITY_BIND}"

# These are some more custom exports
export PROJECT_SCRATCH="/scratch/project_465000670"
export PROJECT_FLASH="/flash/project_465000670"
export SINGULARITY_BIND=/users/larsenra/aws-ofi-rccl/install:/opt/aws-ofi-rccl,/usr/lib64/libjitterentropy.so.3,${SINGULARITY_BIND}
export SINGULARITYENV_LD_LIBRARY_PATH=/opt/ompi/lib:${EBROOTAWSMINOFIMINRCCL}/lib:/opt/cray/xpmem/2.5.2-2.4_3.47__gd0f7936.shasta/lib64:/opt/aws-ofi-rccl/lib:${SINGULARITYENV_LD_LIBRARY_PATH}
export SINGULARITY_BIND=$(echo $SINGULARITY_BIND | sed 's|,/usr/lib64/libssh.so.4||g') # do not bind host libssh which is built against a wrong libssl for some reason
export LC_ALL=C
export HF_DATASETS_CACHE="${PROJECT_SCRATCH}/.cache/huggingface" 
export TRANSFORMERS_CACHE="${PROJECT_SCRATCH}/.cache/huggingface"

# values for distributed setup 
GPUS_PER_NODE=$SLURM_GPUS_PER_NODE
NNODES=$SLURM_NNODES
export NODE_RANK=$SLURM_NODEID
export MASTER_ADDR=$(scontrol show hostnames "$SLURM_JOB_NODELIST" | head -n 1)
export MASTER_PORT=9999
export WORLD_SIZE=$(($GPUS_PER_NODE*$NNODES))

LUSTRE_MOUNT="/pfs/lustrep3" #
export RUN_NAME="{{ job_name }}" # mosaic uses this for e.g. wandb
GIT_ROOT=$(git rev-parse --show-toplevel) # useful for script paths
export GIT_ROOT=${GIT_ROOT#$LUSTRE_MOUNT} # remove the lustre mount from the path (ew...)

# compilers in the container
export CC=gcc-11
export CXX=g++-11

CONTAINER="/project/project_465000670/pytorch_rocm5.7_ubuntu22.04_py3.10_pytorch_2.0.1.sif"

SING_BIND="${PROJECT_SCRATCH},${PROJECT_FLASH}"

# hold separate logs for easier debugging
rm -rf separate-logs
mkdir -p separate-logs

set -exuo pipefail

# symlink logs/latest.out and logs/latest.err
ln -f -s $SLURM_JOB_ID.out logs/latest.out
ln -f -s $SLURM_JOB_ID.err logs/latest.err

CHECKPOINT_PATH=checkpoints
{% endblock %}

{% block cmd %}
CMD=" \
    /scratch/project_465000670/danish-foundation-models/training/llm-foundry/scripts/train/train.py \
    mosaic_config.yaml
    "

echo $CMD

echo "START $SLURM_JOBID: $(date)"

RELATIVE_PWD="${SLURM_SUBMIT_DIR#$LUSTRE_MOUNT}" # ew...

srun \
    --label \
    singularity exec --pwd "$RELATIVE_PWD" -B "$SING_BIND" "$CONTAINER" \
    ./container.sh \
    $CMD

echo "END $SLURM_JOBID: $(date)"
{% endblock %}

